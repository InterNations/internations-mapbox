define(["jquery","underscore","mapbox","leaflet.markercluster"],function($,_){"use strict";function InMap(id,mapbox_id,options){options=options||{},this.id=id,this.map="object"==typeof options.mapbox?L.mapbox.map(id,mapbox_id,options.mapbox):L.mapbox.map(id,mapbox_id),this.markers=[],this.markerLayer=void 0,this.countryLayers={},this.countryGroup=L.featureGroup(),this.highlightGroup=L.featureGroup(),this.goalGroup=L.featureGroup(),this.styles={base:{fillColor:"#cae6bd",fillOpacity:.25,opacity:1,color:"#203047",weight:2},hover:{fillOpacity:.5,color:"#203047",weight:2},goal:{fillOpacity:.5,fillColor:"#aaaaaa",color:"#aaaaaa",weight:2},goalHover:{fillColor:"#cae6bd",fillOpacity:.25,opacity:1,color:"#203047",weight:2}},this.options={},this.options.panDuration=.25,this.options.paddingTopLeft=[0,0],this.options.zoomLevel=5,this.options.mouseScroll=!0,this.options.markerClusteringEnabled=!1,this.options.markerClusteringOptions={},this.__events={zoomnext:[],zoomprev:[],hoverstart:[],hoverend:[]},_.isObject(options.popupOptions)&&L.Popup.mergeOptions(options.popupOptions),_.isObject(options.markerClusteringOptions)&&(this.options.markerClusteringOptions=options.markerClusteringOptions),_.isArray(options.position)?this.addMarker(options):"object"==typeof options&&(this.options=_.extend(this.options,options)),_.isArray(options)&&this.addMarkers(options),_.isArray(options.markers)&&this.addMarkers(options.markers),this.options.mouseScroll===!1&&this.map.scrollWheelZoom.disable(),this.countryGroup.on("dblclick",function(e){this.map.setView(e.latlng,this.map.getZoom()+1)}.bind(this))}Function.prototype.bind||(Function.prototype.bind=function(oThis){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var aArgs=Array.prototype.slice.call(arguments,1),fToBind=this,FNOP=function(){},fBound=function(){return fToBind.apply(this instanceof FNOP&&oThis?this:oThis,aArgs.concat(Array.prototype.slice.call(arguments)))};return FNOP.prototype=this.prototype,fBound.prototype=new FNOP,fBound});var VERSION="1.5.0";if(window.L)var L=window.L;else window.alert("Mapbox/Leaflet has not been loaded");var ie=function(){for(var undef,v=3,div=document.createElement("div"),all=div.getElementsByTagName("i");div.innerHTML="<!--[if gt IE "+ ++v+"]><i></i><![endif]-->",all[0];);return v>4?v:undef}();return InMap.parseMarker=function(opts){var coords,pos;opts instanceof Array&&(coords=opts.reverse()),opts instanceof Object&&void 0!==opts.position&&(pos=opts.position,coords=[pos[1],pos[0]]);var args={type:"Feature",geometry:{type:"Point",coordinates:coords},properties:{}};return void 0!==opts.title&&(args.properties.title=opts.title),void 0!==opts.id&&(args.properties.id=opts.id),void 0!==opts.index&&(args.properties.index=opts.index),void 0!==opts.descriptionSelector&&(args.properties.description=$(opts.descriptionSelector).html()),void 0!==opts.description&&"string"==typeof opts.description&&(args.properties.description=opts.description),void 0!==opts.country&&(args.properties.country=opts.country),void 0!==opts.icon&&("string"==typeof opts.icon&&(args.properties.icon={iconUrl:opts.icon}),"object"==typeof opts.icon&&(args.properties.icon=opts.icon)),args},InMap.featureCount=function(featureLayer){return featureLayer.getLayers().length},InMap.prototype.addMarker=function(opts){return this.addMarkers([opts]),this},InMap.prototype.on=function(event,callback){return void 0!==this.__events[event]?(this.__events[event].push(callback),void 0):(this.map.on(event,callback),void 0)},InMap.prototype.fire=function(event,args){return void 0!==this.__events[event]?(_.each(this.__events[event],function(fn){fn(args)}),void 0):(this.map.fire(event),void 0)},InMap.prototype.registerEvents=function(layer){layer.on("click",function(e){void 0!==e.layer.feature.__events["marker:click"]&&e.layer.feature.__events["marker:click"].length>0&&_.each(e.layer.feature.__events["marker:click"],function(callback){callback(e.layer.feature,e)})}),layer.on("layeradd",function(e){var marker=e.layer,feature=marker.feature;feature&&feature.properties.icon&&marker.setIcon(L.icon(feature.properties.icon))})},InMap.prototype.getMarker=function(id){var index=!1;return _.each(this.markers,function(marker,i){marker.properties.id===id&&(index=i)}),index},InMap.prototype.rebuildMapLayer=function(){this.markerLayer.setGeoJSON(this.markers)},InMap.prototype.removeMarker=function(index){_.isString(index)&&(index=this.getMarker(index)),this.markers.splice(index,1),this.rebuildMapLayer()},InMap.prototype.editMarker=function(index,marker){this.markers[index]=InMap.parseMarker(marker),this.rebuildMapLayer()},InMap.prototype.zoomAll=function(){this.map.fitBounds(this.markerLayer.getBounds())},InMap.prototype.zoomCountries=function(){this.map.fitBounds(this.countryGroup.getBounds())},InMap.prototype.zoomHighlighted=function(){this.map.fitBounds(this.highlightGroup.getBounds())},InMap.prototype.enableMarkerClustering=function(){if(this.options.markerClusteringEnabled)throw"Cannot enable clustering after marker layer initialization.";this.options.markerClusteringEnabled=!0},InMap.prototype.addMarkers=function(markers){this._initializeMarkerLayer();var geojson=this.markerLayer.toGeoJSON();return _.each(markers,function(data){var marker=InMap.parseMarker(data);marker=this._attachMarkerEvents(marker),geojson.features.push(marker),data.country&&void 0!==this.countryData&&this.highlightCountry(data.country),this.markers.push(marker)},this),this._addMarkersToMap(geojson),this},InMap.prototype._initializeMarkerLayer=function(){void 0===this.markerLayer&&(this.markerLayer=this.options.markerClusteringEnabled?new L.MarkerClusterGroup(this.options.markerClusteringOptions):L.mapbox.featureLayer({type:"FeatureCollection",features:[]}),this.registerEvents(this.markerLayer),this.markerLayer.addTo(this.map))},InMap.prototype._attachMarkerEvents=function(marker){return marker.__events={},marker.addEventListener=function(type,callback){this.__events[type]=this.__events[type]||[],this.__events[type].push(callback)},marker},InMap.prototype._addMarkersToMap=function(geojson){if(this.options.markerClusteringEnabled){var layer=L.geoJson(geojson);return this.markerLayer.addLayers(layer.getLayers()),this.markerLayer.eachLayer(function(marker){var props=marker.feature.properties,popup=new L.Popup;popup.setContent(props.description),marker.setIcon(L.icon(props.icon)),marker.bindPopup(popup,{closeButton:!1})})}this.markerLayer.setGeoJSON(geojson)},InMap.prototype.setZoom=function(pos,cb){var targetPoint=this.map.project(pos,this.map.zoomLevel).subtract([this.options.paddingTopLeft[0],this.options.paddingTopLeft[1]]),targetLatLng=this.map.unproject(targetPoint,this.map.zoomLevel);return this.map._initialCenter&&this.map.getCenter().equals(targetLatLng)?(_.isFunction(cb)&&cb(),void 0):(this.map.setView(targetLatLng,this.map.zoomLevel,{zoom:{animate:this.options.zoomLevel===this.map.zoomLevel},pan:{duration:this.options.panDuration,animate:!ie||ie>9}}),void 0)},InMap.prototype.zoomAt=function(index,callback,mapEvent){var marker=this.getFeatureByIndex(index);if(callback&&_.isFunction(callback)&&(mapEvent=mapEvent||"moveend",this.map.once(mapEvent,callback)),setTimeout(function(){this.openTooltip(marker)}.bind(this),1),void 0!==marker.properties.country){var latlng=this.countryLayers[marker.properties.country].getBounds();this.map.fitBounds(latlng,{paddingTopLeft:this.options.paddingTopLeft,pan:{duration:this.options.panDuration,animate:this.options.zoomLevel!==this.map.zoomLevel}})}else if(marker.geometry.coordinates){var latlng=[marker.geometry.coordinates[1],marker.geometry.coordinates[0]];this.setZoom(latlng,callback)}return this},InMap.prototype.openTooltip=function(feature){this.markerLayer.eachLayer(function(marker){marker.closePopup(),_.isEqual(feature.properties.index,marker.feature.properties.index)&&marker.openPopup()})},InMap.prototype.getFeatureByIndex=function(index){var layer=_.find(this.markerLayer.getLayers(),function(layer){return layer.feature.properties.index==index});return layer?layer.feature:null},InMap.prototype.zoomNext=function(callback,mapEvent){void 0===this.currentIndex||this.currentIndex+1>=InMap.featureCount(this.markerLayer)?this.currentIndex=0:this.currentIndex++,this.fire("zoomnext",this.markers[this.currentIndex]),this.zoomAt(this.currentIndex,callback,mapEvent)},InMap.prototype.zoomPrev=function(callback,mapEvent){void 0===this.currentIndex||this.currentIndex-1<0?this.currentIndex=InMap.featureCount(this.markerLayer)-1:this.currentIndex--,this.fire("zoomprev",this.markers[this.currentIndex]),this.zoomAt(this.currentIndex,callback,mapEvent)},InMap.prototype.addCountryData=function(geoJson){var opts={style:this.styles.base,className:"inmap-country",onEachFeature:function(feature,layers){this.registerCountryHandler(this)(feature,layers)}.bind(this)},geoFeatures=this.geoFeatures;geoFeatures?geoFeatures.push(geoJson.features):geoFeatures=geoJson.features,this.countryData=L.geoJson({type:"FeatureCollection",features:geoFeatures},opts).addTo(this.map)},InMap.prototype.removeAllCountries=function(){return _.each(this.countryLayers,function(el,i){this.removeCountryCode(i)},this),this.geoFeatures=void 0,this},InMap.prototype.removeCountryCode=function(countryCode){return this.map.removeLayer(this.countryLayers[countryCode]),_.find(this.geoFeatures,function(el,index){return el.id==countryCode?(this.geoFeatures.splice(index,1),!0):!1},this),this},InMap.prototype.registerCountryHandler=function(instance){return function(feature,layer){feature.layer=layer,feature.id&&(instance.countryLayers[feature.id]=layer,instance.countryGroup.addLayer(layer)),layer.on("mouseover",instance.mouseOverCountry.bind(instance)),layer.on("mouseout",instance.mouseOutCountry.bind(instance))}},InMap.prototype.mouseOverCountry=function(event){this.fire("hoverstart",event),event.target.setStyle(this.styles.hover)},InMap.prototype.mouseOutCountry=function(event){this.fire("hoverend",event),event.target.isGoal?event.target.setStyle(this.styles.goal):event.target.setStyle(this.styles.base)},InMap.prototype.getCountry=function(countryCode){var layers=this.countryData._layers;for(var id in layers)if(layers[id].feature.id===countryCode)return layers[id];return!1},InMap.prototype.setGoal=function(countryCode){var layer=this.getCountry(countryCode);return layer&&(this.setLayerOptions(layer,{className:"inmap-country inmap-country--goal"}),this.setLayerOptions(layer,this.styles.goal),layer.isGoal=!0),this},InMap.prototype.setBase=function(countryCode){var layer=this.getCountry(countryCode);return layer&&(this.setLayerOptions(layer,{className:"inmap-country inmap-country--base"}),this.setLayerOptions(layer,this.styles.base),layer.isGoal=!1),this},InMap.prototype.highlightCountry=function(countryCode){var layer=this.getCountry(countryCode);return layer&&(this.highlightGroup.addLayer(layer),this.setLayerOptions(layer,this.styles.highlight)),this},InMap.prototype.setLayerOptions=function(layer,options){return layer&&"MultiPolygon"===layer.feature.geometry.type&&L.featureGroup([layer]).setStyle(options),layer&&"Polygon"===layer.feature.geometry.type&&L.setOptions(layer,options),this},$.fn.inMap=function(mapbox_id,opts){return new InMap(this.attr("id"),mapbox_id,opts)},$.fn.inMap.version=VERSION,InMap});